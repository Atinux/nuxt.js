#!/usr/bin/env node

// Show logs
process.env.DEBUG = process.env.DEBUG || 'nuxt:*'

const fs = require('fs')
const parseArgs = require('minimist')
const debug = require('debug')('nuxt:generate')

const { Nuxt, Builder, Generator } = require('../')
const resolve = require('path').resolve

const argv = parseArgs(process.argv.slice(2), {
  alias: {
    h: 'help',
    c: 'config-file',
    w: 'workers',
    s: 'spa',
    u: 'universal'
  },
  boolean: ['h', 's', 'u'],
  string: ['c'],
  number: ['w'],
  default: {
    c: 'nuxt.config.js'
  }
})

if (argv.help) {
  console.log(`
    Description
      Generate a static web application (server-rendered)
    Usage
      $ nuxt generate <dir>
    Options
      --config-file, -c   Path to Nuxt.js config file (default: nuxt.config.js)
      --help, -h          Displays this message
      --workers,-w [NUM]  How many workers should be started
                            (default: # cpus or 1 if omitted)
      --spa              Launch in SPA mode
      --universal        Launch in Universal mode (default)
  `)
  process.exit(0)
}

const rootDir = resolve(argv._[0] || '.')
const nuxtConfigFile = resolve(rootDir, argv['config-file'])

var options = {}
if (fs.existsSync(nuxtConfigFile)) {
  options = require(nuxtConfigFile)
} else if (argv['config-file'] !== 'nuxt.config.js') {
  console.error(`> Could not load config file ${argv['config-file']}`)
  process.exit(1)
}
if (typeof options.rootDir !== 'string') {
  options.rootDir = rootDir
}
options.dev = false // Force production mode (no webpack middleware called)

// Nuxt Mode
options.mode = (argv['spa'] && 'spa') || (argv['universal'] && 'universal') || options.mode

debug('Generating...')

const nuxt = new Nuxt(options)

let numWorkers = 0
if (argv['workers'] === true || argv['workers'] === 0 || (typeof argv['workers'] === 'undefined' && nuxt.options.generate.workers === 0)) {
  numWorkers = require('os').cpus().length
} else if(parseInt(argv['workers'])) {
  numWorkers = parseInt(argv['workers'])
} else {
  numWorkers = nuxt.options.generate.workers
}

if (numWorkers <= 1) {
  const debug = require('debug')('nuxt:generate')

  debug('Generating...')
  const builder = new Builder(nuxt)
  const generator = new Generator(nuxt, builder)

  generator.generate()
    .then(() => {
      debug('Generate done')
      process.exit(0)
    })
    .catch((err) => {
      console.error(err) // eslint-disable-line no-console
      process.exit(1)
    })

} else {
  const debug = require('debug')('nuxt:generate-master')

  const cluster = require('cluster')
  cluster.setupMaster({
    exec: __dirname + '/nuxt-generate-worker.js'
  })

  debug(`master process ${process.pid} is running`)

  const start = process.hrtime()
  const watchdog = {}
  let routes

  const builder = new Builder(nuxt)
  const generator = new Generator(nuxt, builder)

  generator.initiate({ build: true, init: true })
  .then(() => {
    debug(`Creating routes`)

    generator.initRoutes()
    .then((_routes) => {
      routes = _routes
      debug(`A total of ${routes.length} routes will be generated`)

      for (let i = 0; i < numWorkers; i++) {
        cluster.fork({ options: JSON.stringify(options) });
      }
    })
  })

  cluster.on('fork', function (worker) {
    debug(`Worker ${worker.process.pid} started`);

    watchdog[worker.process.pid] = {
      start: process.hrtime(),
      duration: 0,
      routes: 0,
      errors: []
    }
  })

  cluster.on('message', function(worker, msg) {
    if (msg.cmd) {
      if (msg.cmd === 'requestRoutes') {
        if (routes.length) {
          // Even the load between workers
          let worker_concurrency = options.generate.worker_concurrency
          if (routes.length < numWorkers * options.generate.worker_concurrency) {
            worker_concurrency = Math.ceil(routes.length / numWorkers)
          }

          let worker_routes = routes.splice(0, worker_concurrency)

          if (worker_routes.length) {
            debug(`Sending ${worker_routes.length} routes to worker ${worker.process.pid}`)
            watchdog[worker.process.pid].routes += worker_routes.length

            worker.send({ cmd: msg.cmd, routes: worker_routes })
          } else {
            debug(`No more routes, exiting worker ${worker.process.pid}`)
            worker.disconnect()
          }
        } else {
          debug(`No more routes, exiting worker ${worker.process.pid}`)
          worker.disconnect()
        }
      } else if (msg.cmd === 'errors') {
        if (msg.errors.length) {
          Array.prototype.push.apply(watchdog[worker.process.pid].errors, msg.errors)
        }
      }
    }
  })

  cluster.on('exit', function(worker, code, signal) {
    let duration = process.hrtime(watchdog[worker.process.pid].start)
    watchdog[worker.process.pid].duration = Math.round((duration[0] * 1E9 + duration[1]) / 1E6)

    let message = `Worker ${worker.process.pid} exited`
    if (signal) {
      message += ` by signal ${signal}`
    } else if(code !== 0) {
      message += ` with error code ${code}`
    }
    debug(message)

    let all_workers_dead = true
    for (let pid in watchdog) {
      if (watchdog[pid].duration === 0) {
        all_workers_dead = false
        break
      }
    }

    if (all_workers_dead) {
      // print report
      let errors = []
      for (let pid in watchdog) {
        let worker_msg = `Worker ${pid} generated ${watchdog[pid].routes} routes in ${Math.round(watchdog[pid].duration/100)/10}s`
        if (watchdog[pid].errors.length) {
          worker_msg += ` with ${watchdog[pid].errors.length} errors`

          Array.prototype.push.apply(errors, watchdog[pid].errors)
        }
        debug(worker_msg)
      }

      generator.postGenerate()

      duration = process.hrtime(start)
      duration = Math.round((duration[0] * 1E9 + duration[1]) / 1E8)/10

      generator.printReport(duration, errors)
    }
  })
}
